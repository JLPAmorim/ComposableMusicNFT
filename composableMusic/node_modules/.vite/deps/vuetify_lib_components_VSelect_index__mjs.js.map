{
  "version": 3,
  "sources": ["../../vuetify/src/components/VSelect/VSelect.tsx"],
  "sourcesContent": ["// Styles\nimport './VSelect.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VCheckboxBtn } from '@/components/VCheckbox'\nimport { VChip } from '@/components/VChip'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VList, VListItem } from '@/components/VList'\nimport { VMenu } from '@/components/VMenu'\nimport { VTextField } from '@/components/VTextField'\n\n// Composables\nimport { makeItemsProps, useItems } from '@/composables/items'\nimport { makeTransitionProps } from '@/composables/transition'\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { IconValue } from '@/composables/icons'\n\n// Utility\nimport { computed, mergeProps, ref } from 'vue'\nimport { genericComponent, propsFactory, useRender, wrapInArray } from '@/util'\n\n// Types\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { InternalItem } from '@/composables/items'\nimport type { MakeSlots, SlotsToProps } from '@/util'\nimport type { PropType } from 'vue'\n\nexport const makeSelectProps = propsFactory({\n  chips: Boolean,\n  closableChips: Boolean,\n  eager: Boolean,\n  hideNoData: Boolean,\n  hideSelected: Boolean,\n  menu: Boolean,\n  menuIcon: {\n    type: IconValue,\n    default: '$dropdown',\n  },\n  menuProps: {\n    type: Object as PropType<VMenu['$props']>,\n  },\n  modelValue: null,\n  multiple: Boolean,\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText',\n  },\n  openOnClear: Boolean,\n  readonly: Boolean,\n\n  ...makeItemsProps({ itemChildren: false }),\n}, 'select')\n\ntype Primitive = string | number | boolean | symbol\n\ntype Val <T, ReturnObject extends boolean> = T extends Primitive\n  ? T\n  : (ReturnObject extends true ? T : any)\n\ntype Value <T, ReturnObject extends boolean, Multiple extends boolean> =\n  Multiple extends true\n    ? readonly Val<T, ReturnObject>[]\n    : Val<T, ReturnObject>\n\nexport const VSelect = genericComponent<new <\n  T,\n  ReturnObject extends boolean = false,\n  Multiple extends boolean = false,\n  V extends Value<T, ReturnObject, Multiple> = Value<T, ReturnObject, Multiple>\n>() => {\n  $props: {\n    items?: readonly T[]\n    returnObject?: ReturnObject\n    multiple?: Multiple\n    modelValue?: V\n    'onUpdate:modelValue'?: (val: V) => void\n  } & Omit<VTextField['$props'], 'modelValue' | 'onUpdate:modelValue' | '$children'> & SlotsToProps<\n    Omit<VInputSlots & VFieldSlots, 'default'> & MakeSlots<{\n      item: [{ item: InternalItem<T>, index: number, props: Record<string, unknown> }]\n      chip: [{ item: InternalItem<T>, index: number, props: Record<string, unknown> }]\n      selection: [{ item: InternalItem<T>, index: number }]\n      'prepend-item': []\n      'append-item': []\n      'no-data': []\n    }>\n  >\n}>()({\n  name: 'VSelect',\n\n  props: {\n    ...makeSelectProps(),\n    ...makeTransitionProps({ transition: { component: VDialogTransition } }),\n  },\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n    'update:menu': (val: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const { t } = useLocale()\n    const vTextFieldRef = ref()\n    const menu = useProxiedModel(props, 'menu')\n    const { items, transformIn, transformOut } = useItems(props)\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      [],\n      v => transformIn(wrapInArray(v)),\n      v => {\n        const transformed = transformOut(v)\n        return props.multiple ? transformed : (transformed[0] ?? null)\n      }\n    )\n    const selections = computed(() => {\n      return model.value.map(v => {\n        return items.value.find(item => item.value === v.value) || v\n      })\n    })\n    const selected = computed(() => selections.value.map(selection => selection.props.value))\n    const listRef = ref<VList>()\n\n    function onClear (e: MouseEvent) {\n      model.value = []\n\n      if (props.openOnClear) {\n        menu.value = true\n      }\n    }\n    function onClickControl () {\n      if (\n        (props.hideNoData && !items.value.length) ||\n        props.readonly\n      ) return\n\n      menu.value = !menu.value\n    }\n    function onKeydown (e: KeyboardEvent) {\n      if (props.readonly) return\n\n      if (['Enter', 'ArrowDown', ' '].includes(e.key)) {\n        menu.value = true\n      }\n\n      if (['Escape', 'Tab'].includes(e.key)) {\n        menu.value = false\n      }\n\n      if (e.key === 'ArrowDown') {\n        listRef.value?.focus('next')\n      } else if (e.key === 'ArrowUp') {\n        listRef.value?.focus('prev')\n      } else if (e.key === 'Home') {\n        listRef.value?.focus('first')\n      } else if (e.key === 'End') {\n        listRef.value?.focus('last')\n      }\n    }\n    function select (item: InternalItem) {\n      if (props.multiple) {\n        const index = selected.value.findIndex(selection => selection === item.value)\n\n        if (index === -1) {\n          model.value = [...model.value, item]\n        } else {\n          const value = [...model.value]\n          value.splice(index, 1)\n          model.value = value\n        }\n      } else {\n        model.value = [item]\n        menu.value = false\n      }\n    }\n    function onBlur (e: FocusEvent) {\n      if (!listRef.value?.$el.contains(e.relatedTarget as HTMLElement)) {\n        menu.value = false\n      }\n    }\n    function onFocusout (e: FocusEvent) {\n      if (e.relatedTarget == null) {\n        vTextFieldRef.value?.focus()\n      }\n    }\n\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip)\n\n      return (\n        <VTextField\n          ref={ vTextFieldRef }\n          modelValue={ model.value.map(v => v.props.value).join(', ') }\n          onUpdate:modelValue={ v => { if (v == null) model.value = [] } }\n          validationValue={ model.externalValue }\n          dirty={ model.value.length > 0 }\n          class={[\n            'v-select',\n            {\n              'v-select--active-menu': menu.value,\n              'v-select--chips': !!props.chips,\n              [`v-select--${props.multiple ? 'multiple' : 'single'}`]: true,\n              'v-select--selected': model.value.length,\n            },\n          ]}\n          appendInnerIcon={ props.menuIcon }\n          readonly\n          onClick:clear={ onClear }\n          onClick:control={ onClickControl }\n          onBlur={ onBlur }\n          onKeydown={ onKeydown }\n        >\n          {{\n            ...slots,\n            default: () => (\n              <>\n                <VMenu\n                  v-model={ menu.value }\n                  activator=\"parent\"\n                  contentClass=\"v-select__content\"\n                  eager={ props.eager }\n                  openOnClick={ false }\n                  closeOnContentClick={ false }\n                  transition={ props.transition }\n                  { ...props.menuProps }\n                >\n                  <VList\n                    ref={ listRef }\n                    selected={ selected.value }\n                    selectStrategy={ props.multiple ? 'independent' : 'single-independent' }\n                    onMousedown={ (e: MouseEvent) => e.preventDefault() }\n                    onFocusout={ onFocusout }\n                  >\n                    { !items.value.length && !props.hideNoData && (slots['no-data']?.() ?? (\n                      <VListItem title={ t(props.noDataText) } />\n                    )) }\n\n                    { slots['prepend-item']?.() }\n\n                    { items.value.map((item, index) => slots.item?.({\n                      item,\n                      index,\n                      props: mergeProps(item.props, { onClick: () => select(item) }),\n                    }) ?? (\n                      <VListItem\n                        key={ index }\n                        { ...item.props }\n                        onClick={ () => select(item) }\n                      >\n                        {{\n                          prepend: ({ isSelected }) => props.multiple && !props.hideSelected ? (\n                            <VCheckboxBtn modelValue={ isSelected } ripple={ false } />\n                          ) : undefined,\n                        }}\n                      </VListItem>\n                    )) }\n\n                    { slots['append-item']?.() }\n                  </VList>\n                </VMenu>\n\n                { selections.value.map((item, index) => {\n                  function onChipClose (e: Event) {\n                    e.stopPropagation()\n                    e.preventDefault()\n\n                    select(item)\n                  }\n\n                  const slotProps = {\n                    'onClick:close': onChipClose,\n                    modelValue: true,\n                    'onUpdate:modelValue': undefined,\n                  }\n\n                  return (\n                    <div key={ item.value } class=\"v-select__selection\">\n                      { hasChips ? (\n                        <VDefaultsProvider\n                          defaults={{\n                            VChip: {\n                              closable: props.closableChips,\n                              size: 'small',\n                              text: item.title,\n                            },\n                          }}\n                        >\n                          { slots.chip\n                            ? slots.chip({ item, index, props: slotProps })\n                            : (<VChip { ...slotProps } />)\n                          }\n                        </VDefaultsProvider>\n                      ) : (\n                        slots.selection\n                          ? slots.selection({ item, index })\n                          : (\n                            <span class=\"v-select__selection-text\">\n                              { item.title }\n                              { props.multiple && (index < selections.value.length - 1) && (\n                                <span class=\"v-select__selection-comma\">,</span>\n                              ) }\n                            </span>\n                          )\n                      )}\n                    </div>\n                  )\n                }) }\n              </>\n            ),\n          }}\n        </VTextField>\n      )\n    })\n\n    return forwardRefs({\n      menu,\n      select,\n    }, vTextFieldRef)\n  },\n})\n\nexport type VSelect = InstanceType<typeof VSelect>\n"],
  "mappings": "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",
  "names": ["makeSelectProps", "propsFactory", "chips", "Boolean", "closableChips", "eager", "hideNoData", "hideSelected", "menu", "menuIcon", "type", "IconValue", "default", "menuProps", "Object", "modelValue", "multiple", "noDataText", "String", "openOnClear", "readonly", "makeItemsProps", "itemChildren", "VSelect", "genericComponent", "name", "props", "makeTransitionProps", "transition", "component", "VDialogTransition", "emits", "val", "setup", "slots", "t", "useLocale", "vTextFieldRef", "ref", "useProxiedModel", "items", "transformIn", "transformOut", "useItems", "model", "v", "wrapInArray", "transformed", "selections", "computed", "value", "map", "find", "item", "selected", "selection", "listRef", "onClear", "e", "onClickControl", "length", "onKeydown", "includes", "key", "focus", "select", "index", "findIndex", "splice", "onBlur", "$el", "contains", "relatedTarget", "onFocusout", "useRender", "hasChips", "chip", "join", "externalValue", "preventDefault", "_a", "mergeProps", "onClick", "prepend", "isSelected", "undefined", "onChipClose", "stopPropagation", "slotProps", "VChip", "closable", "size", "text", "title", "forwardRefs"]
}
