{
  "version": 3,
  "sources": ["../../vuetify/src/components/VIcon/VIcon.tsx"],
  "sourcesContent": ["// Styles\nimport './VIcon.sass'\n\n// Composables\nimport { IconValue, useIcon } from '@/composables/icons'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\nimport { useTextColor } from '@/composables/color'\n\n// Utilities\nimport { computed, toRef } from 'vue'\nimport { convertToUnit, defineComponent, flattenFragments, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { ComputedRef } from 'vue'\n\nexport const makeVIconProps = propsFactory({\n  color: String,\n  start: Boolean,\n  end: Boolean,\n  icon: IconValue,\n\n  ...makeSizeProps(),\n  ...makeTagProps({ tag: 'i' }),\n  ...makeThemeProps(),\n}, 'v-icon')\n\nexport const VIcon = defineComponent({\n  name: 'VIcon',\n\n  props: makeVIconProps(),\n\n  setup (props, { attrs, slots }) {\n    let slotIcon: ComputedRef<string | undefined> | undefined\n    if (slots.default) {\n      slotIcon = computed(() => {\n        const slot = slots.default?.()\n        if (!slot) return\n\n        return flattenFragments(slot).filter(node =>\n          node.children && typeof node.children === 'string'\n        )[0]?.children as string\n      })\n    }\n\n    const { themeClasses } = provideTheme(props)\n    const { iconData } = useIcon(slotIcon || props)\n    const { sizeClasses } = useSize(props)\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n\n    useRender(() => (\n      <iconData.value.component\n        tag={ props.tag }\n        icon={ iconData.value.icon }\n        class={[\n          'v-icon',\n          'notranslate',\n          themeClasses.value,\n          sizeClasses.value,\n          textColorClasses.value,\n          {\n            'v-icon--clickable': !!attrs.onClick,\n            'v-icon--start': props.start,\n            'v-icon--end': props.end,\n          },\n        ]}\n        style={[\n          !sizeClasses.value ? ({\n            fontSize: convertToUnit(props.size),\n            height: convertToUnit(props.size),\n            width: convertToUnit(props.size),\n          }) : undefined,\n          textColorStyles.value,\n        ]}\n        role={ attrs.onClick ? 'button' : undefined }\n        aria-hidden={ !attrs.onClick }\n      />\n    ))\n\n    return {}\n  },\n})\n\nexport type VIcon = InstanceType<typeof VIcon>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA;AAgBO,IAAMA,iBAAiBC,aAAa;EACzCC,OAAOC;EACPC,OAAOC;EACPC,KAAKD;EACLE,MAAMC;EAEN,GAAGC,cAAa;EAChB,GAAGC,aAAa;IAAEC,KAAK;EAAI,CAAC;EAC5B,GAAGC,eAAc;AACnB,GAAG,QAAQ;AAEJ,IAAMC,QAAQC,gBAAgB;EACnCC,MAAM;EAENC,OAAOhB,eAAc;EAErBiB,MAAOD,OAAK,MAAoB;AAAA,QAAlB;MAAEE;MAAOC;IAAM,IAAC;AAC5B,QAAIC;AACJ,QAAID,MAAME,SAAS;AACjBD,iBAAWE,SAAS,MAAM;AAAA,YAAA,gBAAA;AACxB,cAAMC,QAAI,iBAAGJ,MAAME,YAAO,OAAA,SAAb,eAAA,KAAAF,KAAK;AAClB,YAAI,CAACI;AAAM;AAEX,gBAAA,wBAAOC,iBAAiBD,IAAI,EAAEE,OAAOC,UACnCA,KAAKC,YAAY,OAAOD,KAAKC,aAAa,QAAQ,EAClD,OAAE,OAAA,SAFG,sBAEDA;MACR,CAAC;IACH;AAEA,UAAM;MAAEC;IAAa,IAAIC,aAAab,KAAK;AAC3C,UAAM;MAAEc;IAAS,IAAIC,QAAQX,YAAYJ,KAAK;AAC9C,UAAM;MAAEgB;IAAY,IAAIC,QAAQjB,KAAK;AACrC,UAAM;MAAEkB;MAAkBC;IAAgB,IAAIC,aAAaC,MAAMrB,OAAO,OAAO,CAAC;AAEhFsB,cAAU,MAAA,YAAA,SAAA,MAAA,WAAA;MAAA,OAEAtB,MAAML;MAAG,QACRmB,SAASS,MAAMhC;MAAI,SACnB,CACL,UACA,eACAqB,aAAaW,OACbP,YAAYO,OACZL,iBAAiBK,OACjB;QACE,qBAAqB,CAAC,CAACrB,MAAMsB;QAC7B,iBAAiBxB,MAAMZ;QACvB,eAAeY,MAAMV;MACvB,CAAC;MACF,SACM,CACL,CAAC0B,YAAYO,QAAS;QACpBE,UAAUC,cAAc1B,MAAM2B,IAAI;QAClCC,QAAQF,cAAc1B,MAAM2B,IAAI;QAChCE,OAAOH,cAAc1B,MAAM2B,IAAI;MACjC,IAAKG,QACLX,gBAAgBI,KAAK;MACtB,QACMrB,MAAMsB,UAAU,WAAWM;MAAS,eAC7B,CAAC5B,MAAMsB;IAAO,GAAA,IAAA,CAE/B;AAED,WAAO,CAAC;EACV;AACF,CAAC;",
  "names": ["makeVIconProps", "propsFactory", "color", "String", "start", "Boolean", "end", "icon", "IconValue", "makeSizeProps", "makeTagProps", "tag", "makeThemeProps", "VIcon", "defineComponent", "name", "props", "setup", "attrs", "slots", "slotIcon", "default", "computed", "slot", "flattenFragments", "filter", "node", "children", "themeClasses", "provideTheme", "iconData", "useIcon", "sizeClasses", "useSize", "textColorClasses", "textColorStyles", "useTextColor", "toRef", "useRender", "value", "onClick", "fontSize", "convertToUnit", "size", "height", "width", "undefined"]
}
